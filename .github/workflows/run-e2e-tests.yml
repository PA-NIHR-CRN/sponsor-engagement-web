name: Sponsor Engagement E2E Tests

on:
  workflow_dispatch:
    inputs:
      publish-report:
        description: "Upload report to GitHub Pages? Note - Current report will be overwritten! Accepts true or false"
        options: ['true', 'false']
        required: true
        default: 'true'
      test-tag:
        description: "Specify tests with tags. For example: `@se_21`. To run all tests leave as `all`"
        required: true
        default: "all"

env:
  AWS_REGION_1: eu-west-1
  AWS_REGION_2: eu-west-2

jobs:
  e2e-test:
    name: 'Run E2E Tests'
    timeout-minutes: 15
    environment: TEST
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: 20

    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright
      run: npx playwright install --with-deps
    
    - name: Install Playwright dependencies
      working-directory: ./packages/qa
      run: npm i
    
    - name: Get GitHub Actions Runner Public IP
      id: publicip
      run: |
        response=$(curl -s icanhazip.com)
        echo "ip=$response" >> "$GITHUB_OUTPUT"

    - name: Configure AWS credentials (SE)
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.NIHR_GITHUB_ACTIONS_IAM_ID }}
        aws-secret-access-key: ${{ secrets.NIHR_GITHUB_ACTIONS_IAM_SECRET }}
        aws-region: eu-west-2

    - name: Add Github Actions IP to LB security group (Test)
      run: |
        aws ec2 authorize-security-group-ingress \
          --group-id ${{ secrets.LB_SG_TEST }} \
          --ip-permissions '[{"IpProtocol": "tcp", "FromPort": 443, "ToPort": 443, "IpRanges": [{"CidrIp": "${{ steps.publicip.outputs.ip }}/32", "Description": "GitHub runner IP for SE automation test run"}]}]'

    - name: Add Github Actions IP to RDS security group (Test)
      run: |
        aws ec2 authorize-security-group-ingress \
          --group-id ${{ secrets.RDS_SG }} \
          --ip-permissions '[{"IpProtocol": "tcp", "FromPort": 3306, "ToPort": 3306, "IpRanges": [{"CidrIp": "${{ steps.publicip.outputs.ip }}/32", "Description": "GitHub runner IP for SE automation DB requests"}]}]'

    - name: Configure AWS credentials (CPMS)
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.CRNCC_IAM_GITHUB_ACTIONS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.CRNCC_IAM_GITHUB_ACTIONS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION_1 }}

    - name: Add Github Actions IP to CPMS API security group (Test)
      run: |
        aws ec2 authorize-security-group-ingress \
          --group-id ${{ secrets.SE_TEST_CPMS_API_SG_ID }} \
          --ip-permissions '[{"IpProtocol": "tcp", "FromPort": 443, "ToPort": 443, "IpRanges": [{"CidrIp": "${{ steps.publicip.outputs.ip }}/32", "Description": "GitHub runner IP for SE automation CPMS API requests"}]}]'

    - name: Add Github Actions IP to CPMS DB security group (Test)
      run: |
        aws ec2 authorize-security-group-ingress \
          --group-id ${{ secrets.CPMS_TEST_DB_SG }} \
          --ip-permissions '[{"IpProtocol": "tcp", "FromPort": 1433, "ToPort": 1433, "IpRanges": [{"CidrIp": "${{ steps.publicip.outputs.ip }}/32", "Description": "GitHub runner IP for SE automation CPMS DB requests"}]}]'

    - name: Run SE E2E Tests
      working-directory: ./packages/qa
      run: |
        if [[ "${{ github.event.inputs.test-tag }}" != '' && "${{ github.event.inputs.test-tag }}" != 'all' ]]; then
          echo "running only e2e tests tagged '${{ github.event.inputs.test-tag }}'"
          npm test -- --grep ${{ github.event.inputs.test-tag }}
        else
          echo "running all e2e tests"
          npm test
        fi
      env:
        E2E_BASE_URL: ${{ vars.E2E_BASE_URL }}
        SPONSOR_CONTACT_USER: ${{ secrets.SPONSOR_CONTACT_USER }}
        SPONSOR_CONTACT_PASS: ${{ secrets.SPONSOR_CONTACT_PASS }}
        SPONSOR_CONTACT_MANAGER_USER: ${{ secrets.SPONSOR_CONTACT_MANAGER_USER }}
        SPONSOR_CONTACT_MANAGER_PASS: ${{ secrets.SPONSOR_CONTACT_MANAGER_PASS }}
        CONTACT_MANAGER_USER: ${{ secrets.CONTACT_MANAGER_USER }}
        CONTACT_MANAGER_PASS: ${{ secrets.CONTACT_MANAGER_PASS }}
        SE_NO_LOCAL_ACCOUNT_USER: ${{ secrets.SE_NO_LOCAL_ACCOUNT_USER }}
        SE_NO_LOCAL_ACCOUNT_PASS: ${{ secrets.SE_NO_LOCAL_ACCOUNT_PASS }}
        CPMS_NPM_USER: ${{ secrets.CPMS_NPM_USER }}
        CPMS_NPM_PASS: ${{ secrets.CPMS_NPM_PASS }}
        SE_TEST_DB_HOST: ${{ secrets.SE_TEST_DB_HOST }}
        SE_TEST_DB_USERNAME: ${{ secrets.SE_TEST_DB_USERNAME }}
        SE_TEST_DB_PASSWORD: ${{ secrets.SE_TEST_DB_PASSWORD }}
        SE_TEST_API_URL: ${{ secrets.CPMS_API_BASE_URL }}
        SE_TEST_API_USERNAME: ${{ secrets.CPMS_API_USERNAME }}
        SE_TEST_API_PASSWORD: ${{ secrets.CPMS_API_PASSWORD }}
        CPMS_TEST_DB_HOST: ${{ secrets.CPMS_TEST_DB_HOST }}
        CPMS_TEST_DB_USERNAME: ${{ secrets.CPMS_TEST_DB_USERNAME }}
        CPMS_TEST_DB_PASSWORD: ${{ secrets.CPMS_TEST_DB_PASSWORD }}
    
    - name: Remove Github Actions IP from CPMS API security group (Test)
      if: always()        
      run: |
        aws ec2 revoke-security-group-ingress \
          --group-id ${{ secrets.SE_TEST_CPMS_API_SG_ID }} \
          --ip-permissions '[{"IpProtocol": "tcp", "FromPort": 443, "ToPort": 443, "IpRanges": [{"CidrIp": "${{ steps.publicip.outputs.ip }}/32", "Description": "GitHub runner IP for SE automation CPMS API requests"}]}]'

    - name: Remove Github Actions IP from CPMS DB security group (Test)
      if: always()        
      run: |
        aws ec2 revoke-security-group-ingress \
          --group-id ${{ secrets.CPMS_TEST_DB_SG }} \
          --ip-permissions '[{"IpProtocol": "tcp", "FromPort": 1433, "ToPort": 1433, "IpRanges": [{"CidrIp": "${{ steps.publicip.outputs.ip }}/32", "Description": "GitHub runner IP for SE automation CPMS DB requests"}]}]'

    - name: Configure AWS credentials (SE)
      if: always()  
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.NIHR_GITHUB_ACTIONS_IAM_ID }}
        aws-secret-access-key: ${{ secrets.NIHR_GITHUB_ACTIONS_IAM_SECRET }}
        aws-region: eu-west-2

    - name: Remove Github Actions IP from LB security group (Test)
      if: always()
      run: |
        aws ec2 revoke-security-group-ingress \
          --group-id ${{ secrets.LB_SG_TEST }} \
          --ip-permissions '[{"IpProtocol": "tcp", "FromPort": 443, "ToPort": 443, "IpRanges": [{"CidrIp": "${{ steps.publicip.outputs.ip }}/32", "Description": "GitHub runner IP for SE automation test run"}]}]'

    - name: Remove Github Actions IP from LB security group (Test)
      if: always()
      run: |
        aws ec2 revoke-security-group-ingress \
          --group-id ${{ secrets.RDS_SG }} \
          --ip-permissions '[{"IpProtocol": "tcp", "FromPort": 3306, "ToPort": 3306, "IpRanges": [{"CidrIp": "${{ steps.publicip.outputs.ip }}/32", "Description": "GitHub runner IP for SE automation DB requests"}]}]'

    - name: Upload HTML Report as artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-report
        path: ./packages/qa/test-report/
        retention-days: 3
    
    - name: 'Download HTML Report Artifact'
      uses: actions/download-artifact@v3
      id: download
      if: github.event.inputs.publish-report != 'false' && always()

    - name: Publish to GH Pages
      if: github.event.inputs.publish-report != 'false' && always()
      uses: JamesIves/github-pages-deploy-action@v4
      with:
        folder: ${{steps.download.outputs.download-path}}/test-report/
        branch: gh-pages

  send-slack-message-failure:
    name: Send slack message failure
    needs: [e2e-test]
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - uses: technote-space/workflow-conclusion-action@v3
      - name: "Set Env Message to TEST"
        run: |
          echo "ENV_MSG=TEST" >> "$GITHUB_ENV"
      
      - name: Slack Notify
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/se-phase-2'
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_WEBHOOK: ${{ secrets.SE_SLACK_WEBHOOK }}
          SLACK_COLOR: "failure"
          SLACK_MESSAGE: "SE E2E Regression Tests Failed in ${{ env.ENV_MSG }}! :face_with_thermometer:"
          SLACK_TITLE: "Sponsor Engagement E2E UI Tests - ENV:${{ env.ENV_MSG }} : FAILURE :x:"

  send-slack-message-success:
    name: Send slack message success
    needs: [e2e-test]
    runs-on: ubuntu-latest
    if: success()
    steps:
      
      - uses: technote-space/workflow-conclusion-action@v3
      - name: "Set Env Message to TEST"
        run: |
          echo "ENV_MSG=TEST" >> "$GITHUB_ENV"
      
      - name: Slack Notify
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/se-phase-2'
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_WEBHOOK: ${{ secrets.SE_SLACK_WEBHOOK }}
          SLACK_COLOR: "success"
          SLACK_MESSAGE: "SE E2E Regression Tests Passed in ${{ env.ENV_MSG }}! :partying_face:"
          SLACK_TITLE: "Sponsor Engagement E2E UI Tests - ENV:${{ env.ENV_MSG }} : SUCCESS :tick:"

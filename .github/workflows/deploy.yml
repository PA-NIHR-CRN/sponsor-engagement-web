name: Deploy Web App

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AWS_REGION: eu-west-2

jobs:
  build:
    name: 'Build'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup-node
      - name: Install
        run: npm ci --no-audit --no-fund
      - name: Build
        run: |
          npm run db:generate
          npm run build

  deploy-dev:
    needs: [build]
    environment: DEV
    name: 'Deploy Dev'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials (dev)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.NIHR_GITHUB_ACTIONS_IAM_ID }}
          aws-secret-access-key: ${{ secrets.NIHR_GITHUB_ACTIONS_IAM_SECRET }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get secrets from Secrets Manager
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            crnccd-secret-dev-se-app-config
          parse-json-secrets: true

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get GitHub Actions Runner Public IP
        id: publicip
        run: |
          response=$(curl -s icanhazip.com)
          echo "ip=$response" >> "$GITHUB_OUTPUT"

      - name: Add Github Actions IP to RDS security group (Dev)
        run: |
          aws ec2 authorize-security-group-ingress --group-id ${{ secrets.RDS_SG }} --ip-permissions '[{"IpProtocol": "tcp", "FromPort": 3306, "ToPort": 3306, "IpRanges": [{"CidrIp": "${{ steps.publicip.outputs.ip }}/32", "Description": "GitHub runner IP for Sponsor Engagement automation DB migration"}]}]'

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REPOSITORY: crnccd-ecr-dev-se-repository
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_NAME_TAG: se-web
          IMAGE_SHA_TAG: se-web-${{ github.sha }}
        run: |
          echo "Using registry ${{ env.ECR_REGISTRY }}"
          echo "Tagging image with ${{ env.IMAGE_NAME_TAG}} and ${{ env.IMAGE_SHA_TAG }}"
          docker build -f apps/web/Dockerfile --build-arg NEXT_PUBLIC_ODP_DASHBOARD_LINK=${{ env.CRNCCD_SECRET_DEV_SE_APP_CONFIG_NEXT_PUBLIC_ODP_DASHBOARD_LINK }} --build-arg NEXT_PUBLIC_GTM_ID=${{ env.CRNCCD_SECRET_DEV_SE_APP_CONFIG_NEXT_PUBLIC_GTM_ID }} -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_NAME_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_SHA_TAG .
          docker push --all-tags $ECR_REGISTRY/$ECR_REPOSITORY
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_SHA_TAG" >> "$GITHUB_OUTPUT"

      - name: Run database migrations
        run: npm run migrate:deploy
        env:
          DATABASE_URL: ${{ env.CRNCCD_SECRET_DEV_SE_APP_CONFIG_DATABASE_URL }}

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        env:
          ECS_TASK_DEFINITION: ./apps/web/.aws/task-definition-dev.json
          CONTAINER_NAME: crnccd-ecs-dev-se-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}
          environment-variables: |
            AWS_REGION=${{ env.AWS_REGION }}
            AWS_SECRET_NAME=${{ vars.AWS_SECRET_NAME }}
            NEXTAUTH_URL=${{ vars.NEXTAUTH_URL }}

      - name: Remove Github Actions IP from RDS security group (Dev)
        run: |
          aws ec2 revoke-security-group-ingress --group-id ${{ secrets.RDS_SG }} --ip-permissions '[{"IpProtocol": "tcp", "FromPort": 3306, "ToPort": 3306, "IpRanges": [{"CidrIp": "${{ steps.publicip.outputs.ip }}/32", "Description": "GitHub runner IP for Sponsor Engagement automation DB migration"}]}]'
          
      - name: Deploy Amazon ECS task definition
        env:
          ECS_SERVICE: crnccd-ecs-dev-se-service
          ECS_CLUSTER: crnccd-ecs-dev-se-cluster
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

  deploy-test:
    needs: deploy-dev
    environment: TEST
    name: 'Deploy Test'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials (test)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.NIHR_GITHUB_ACTIONS_IAM_ID }}
          aws-secret-access-key: ${{ secrets.NIHR_GITHUB_ACTIONS_IAM_SECRET }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get secrets from Secrets Manager
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            crnccd-secret-test-se-app-config
          parse-json-secrets: true

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get GitHub Actions Runner Public IP
        id: publicip
        run: |
          response=$(curl -s icanhazip.com)
          echo "ip=$response" >> "$GITHUB_OUTPUT"
      - name: Add Github Actions IP to RDS security group (Test)
        run: |
          aws ec2 authorize-security-group-ingress --group-id ${{ secrets.RDS_SG }} --ip-permissions '[{"IpProtocol": "tcp", "FromPort": 3306, "ToPort": 3306, "IpRanges": [{"CidrIp": "${{ steps.publicip.outputs.ip }}/32", "Description": "GitHub runner IP for Sponsor Engagement automation DB migration"}]}]'

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REPOSITORY: crnccd-ecr-test-se-repository
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_NAME_TAG: se-web
          IMAGE_SHA_TAG: se-web-${{ github.sha }}
        run: |
          echo "Using registry ${{ env.ECR_REGISTRY }}"
          echo "Tagging image with ${{ env.IMAGE_NAME_TAG}} and ${{ env.IMAGE_SHA_TAG }}"
          docker build -f apps/web/Dockerfile --build-arg NEXT_PUBLIC_ODP_DASHBOARD_LINK=${{ env.CRNCCD_SECRET_TEST_SE_APP_CONFIG_NEXT_PUBLIC_ODP_DASHBOARD_LINK }} --build-arg NEXT_PUBLIC_GTM_ID=${{ env.CRNCCD_SECRET_TEST_SE_APP_CONFIG_NEXT_PUBLIC_GTM_ID }} -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_NAME_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_SHA_TAG .
          docker push --all-tags $ECR_REGISTRY/$ECR_REPOSITORY
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_SHA_TAG" >> "$GITHUB_OUTPUT"

      - name: Run database migrations
        run: npm run migrate:deploy
        env:
          DATABASE_URL: ${{ env.CRNCCD_SECRET_TEST_SE_APP_CONFIG_DATABASE_URL }}

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        env:
          ECS_TASK_DEFINITION: ./apps/web/.aws/task-definition-test.json
          CONTAINER_NAME: crnccd-ecs-test-se-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}
          environment-variables: |
            AWS_REGION=${{ env.AWS_REGION }}
            AWS_SECRET_NAME=${{ vars.AWS_SECRET_NAME }}
            NEXTAUTH_URL=${{ vars.NEXTAUTH_URL }}
            
      - name: Remove Github Actions IP from RDS security group (Test)
        run: |
          aws ec2 revoke-security-group-ingress --group-id ${{ secrets.RDS_SG }} --ip-permissions '[{"IpProtocol": "tcp", "FromPort": 3306, "ToPort": 3306, "IpRanges": [{"CidrIp": "${{ steps.publicip.outputs.ip }}/32", "Description": "GitHub runner IP for Sponsor Engagement automation DB migration"}]}]'

      - name: Deploy Amazon ECS task definition
        env:
          ECS_SERVICE: crnccd-ecs-test-se-service
          ECS_CLUSTER: crnccd-ecs-test-se-cluster
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

  e2e-test:
    needs: deploy-test
    environment: TEST
    name: 'Run E2E Tests'
    timeout-minutes: 15
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps

      - name: Install Playwright dependencies
        working-directory: ./packages/qa
        run: npm i

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.NIHR_GITHUB_ACTIONS_IAM_ID }}
          aws-secret-access-key: ${{ secrets.NIHR_GITHUB_ACTIONS_IAM_SECRET }}
          aws-region: eu-west-2

      - name: Get GitHub Actions Runner Public IP
        id: publicip
        run: |
          response=$(curl -s icanhazip.com)
          echo "ip=$response" >> "$GITHUB_OUTPUT"

      - name: Add Github Actions IP to LB security group (Test)
        run: |
          aws ec2 authorize-security-group-ingress --group-id ${{ secrets.LB_SG_TEST }} --ip-permissions '[{"IpProtocol": "tcp", "FromPort": 443, "ToPort": 443, "IpRanges": [{"CidrIp": "${{ steps.publicip.outputs.ip }}/32", "Description": "GitHub runner IP for SE automation test run"}]}]'

      - name: Add Github Actions IP to RDS security group (Test)
        run: |
          aws ec2 authorize-security-group-ingress --group-id ${{ secrets.RDS_SG }} --ip-permissions '[{"IpProtocol": "tcp", "FromPort": 3306, "ToPort": 3306, "IpRanges": [{"CidrIp": "${{ steps.publicip.outputs.ip }}/32", "Description": "GitHub runner IP for SE automation DB requests"}]}]'

      - name: Run All SE E2E Tests
        working-directory: ./packages/qa
        if: github.event.inputs.test-tag == '' || github.event.inputs.test-tag == 'all'
        run: npx playwright test
        env:
          E2E_BASE_URL: ${{ vars.E2E_BASE_URL }}
          CPMS_TEST_DB_PASSWORD: ${{ secrets.CPMS_TEST_DB_PASSWORD }}
          CPMS_TEST_DB_SERVER: ${{ secrets.CPMS_TEST_DB_SERVER }}
          SE_TEST_DB_PASSWORD: ${{ secrets.SE_TEST_DB_PASSWORD }}
          SE_TEST_DB_HOST: ${{ secrets.SE_TEST_DB_HOST }}
          SPONSOR_CONTACT_PASS: ${{ secrets.SPONSOR_CONTACT_PASS }}
          SPONSOR_CONTACT_MANAGER_PASS: ${{ secrets.SPONSOR_CONTACT_MANAGER_PASS }}
          CONTACT_MANAGER_PASS: ${{ secrets.CONTACT_MANAGER_PASS }}
          SE_NO_LOCAL_ACCOUNT_PASS: ${{ secrets.SE_NO_LOCAL_ACCOUNT_PASS }}

      - name: Run Tag Specific SE E2E Tests
        working-directory: ./packages/qa
        if: github.event.inputs.test-tag != '' && github.event.inputs.test-tag != 'all'
        run: npx playwright test --grep ${{ github.event.inputs.test-tag }}
        env:
          E2E_BASE_URL: ${{ vars.E2E_BASE_URL }}
          CPMS_TEST_DB_PASSWORD: ${{ secrets.CPMS_TEST_DB_PASSWORD }}
          CPMS_TEST_DB_SERVER: ${{ secrets.CPMS_TEST_DB_SERVER }}
          SE_TEST_DB_PASSWORD: ${{ secrets.SE_TEST_DB_PASSWORD }}
          SE_TEST_DB_HOST: ${{ secrets.SE_TEST_DB_HOST }}
          SPONSOR_CONTACT_PASS: ${{ secrets.SPONSOR_CONTACT_PASS }}
          SPONSOR_CONTACT_MANAGER_PASS: ${{ secrets.SPONSOR_CONTACT_MANAGER_PASS }}
          CONTACT_MANAGER_PASS: ${{ secrets.CONTACT_MANAGER_PASS }}
          SE_NO_LOCAL_ACCOUNT_PASS: ${{ secrets.SE_NO_LOCAL_ACCOUNT_PASS }}

      - name: Remove Github Actions IP from LB security group (Test)
        run: |
          aws ec2 revoke-security-group-ingress --group-id ${{ secrets.LB_SG_TEST }} --ip-permissions '[{"IpProtocol": "tcp", "FromPort": 443, "ToPort": 443, "IpRanges": [{"CidrIp": "${{ steps.publicip.outputs.ip }}/32", "Description": "GitHub runner IP for SE automation test run"}]}]'

      - name: Remove Github Actions IP from LB security group (Test)
        run: |
          aws ec2 revoke-security-group-ingress --group-id ${{ secrets.RDS_SG }} --ip-permissions '[{"IpProtocol": "tcp", "FromPort": 3306, "ToPort": 3306, "IpRanges": [{"CidrIp": "${{ steps.publicip.outputs.ip }}/32", "Description": "GitHub runner IP for SE automation DB requests"}]}]'

      - name: Upload HTML Report as artifact
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-report
          path: ./packages/qa/test-report/
          retention-days: 3

      - name: 'Download HTML Report Artifact'
        uses: actions/download-artifact@v3
        id: download
        if: github.event.inputs.publish-report != 'false' && always()

      - name: Publish to GH Pages
        if: github.event.inputs.publish-report != 'false' && always()
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: ${{steps.download.outputs.download-path}}/test-report/
          branch: gh-pages

      - name: Send slack message failure
        if: failure() && github.ref == 'refs/heads/main'
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_WEBHOOK: ${{ secrets.SE_SLACK_WEBHOOK }}
          SLACK_COLOR: 'failure'
          SLACK_MESSAGE: 'SE E2E Regression Tests Failed in TEST! :face_with_thermometer:'
          SLACK_TITLE: 'Sponsor Engagement E2E UI Tests - ENV: TEST : FAILURE :x:'

      - name: Send slack message success
        if: success() && github.ref == 'refs/heads/main'
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_WEBHOOK: ${{ secrets.SE_SLACK_WEBHOOK }}
          SLACK_COLOR: 'success'
          SLACK_MESSAGE: 'SE E2E Regression Tests Passed in TEST! :partying_face:'
          SLACK_TITLE: 'Sponsor Engagement E2E UI Tests - ENV: TEST : SUCCESS :tick:'

  deploy-uat:
    needs: e2e-test
    environment: UAT
    name: 'Deploy Uat'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials (uat)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.CRNCC_STAGING_IAM_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.CRNCC_STAGING_IAM_ACCESS_KEY_SECRET }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get secrets from Secrets Manager
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            crnccs-secret-uat-se-app-config
          parse-json-secrets: true

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get GitHub Actions Runner Public IP
        id: publicip
        run: |
          response=$(curl -s icanhazip.com)
          echo "ip=$response" >> "$GITHUB_OUTPUT"

      - name: Add Github Actions IP to RDS security group (Uat)
        run: |
          aws ec2 authorize-security-group-ingress --group-id ${{ secrets.RDS_SG }} --ip-permissions '[{"IpProtocol": "tcp", "FromPort": 3306, "ToPort": 3306, "IpRanges": [{"CidrIp": "${{ steps.publicip.outputs.ip }}/32", "Description": "GitHub runner IP for Sponsor Engagement automation DB migration"}]}]'

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REPOSITORY: crnccs-ecr-uat-se-repository
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_NAME_TAG: se-web
          IMAGE_SHA_TAG: se-web-${{ github.sha }}
        run: |
          echo "Using registry ${{ env.ECR_REGISTRY }}"
          echo "Tagging image with ${{ env.IMAGE_NAME_TAG}} and ${{ env.IMAGE_SHA_TAG }}"
          docker build -f apps/web/Dockerfile --build-arg NEXT_PUBLIC_ODP_DASHBOARD_LINK=${{ env.CRNCCD_SECRET_UAT_SE_APP_CONFIG_NEXT_PUBLIC_ODP_DASHBOARD_LINK }} --build-arg NEXT_PUBLIC_GTM_ID=${{ env.CRNCCS_SECRET_UAT_SE_APP_CONFIG_NEXT_PUBLIC_GTM_ID }} -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_NAME_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_SHA_TAG .
          docker push --all-tags $ECR_REGISTRY/$ECR_REPOSITORY
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_SHA_TAG" >> "$GITHUB_OUTPUT"

      - name: Run database migrations
        run: npm run migrate:deploy
        env:
          DATABASE_URL: ${{ env.CRNCCS_SECRET_UAT_SE_APP_CONFIG_DATABASE_URL }}

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        env:
          ECS_TASK_DEFINITION: ./apps/web/.aws/task-definition-uat.json
          CONTAINER_NAME: crnccs-ecs-uat-se-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}
          environment-variables: |
            AWS_REGION=${{ env.AWS_REGION }}
            AWS_SECRET_NAME=${{ vars.AWS_SECRET_NAME }}
            NEXTAUTH_URL=${{ vars.NEXTAUTH_URL }}

      - name: Remove Github Actions IP from RDS security group (Uat)
        run: |
          aws ec2 revoke-security-group-ingress --group-id ${{ secrets.RDS_SG }} --ip-permissions '[{"IpProtocol": "tcp", "FromPort": 3306, "ToPort": 3306, "IpRanges": [{"CidrIp": "${{ steps.publicip.outputs.ip }}/32", "Description": "GitHub runner IP for Sponsor Engagement automation DB migration"}]}]'
      - name: Deploy Amazon ECS task definition
        env:
          ECS_SERVICE: crnccs-ecs-uat-se-service
          ECS_CLUSTER: crnccs-ecs-uat-se-cluster
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

  deploy-oat:
    needs: deploy-uat
    environment: OAT
    name: 'Deploy Oat'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials (oat)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.CRNCC_PROD_IAM_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.CRNCC_PROD_IAM_ACCESS_KEY_SECRET }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get secrets from Secrets Manager
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            crnccp-secret-oat-se-app-config
          parse-json-secrets: true

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get GitHub Actions Runner Public IP
        id: publicip
        run: |
          response=$(curl -s icanhazip.com)
          echo "ip=$response" >> "$GITHUB_OUTPUT"
      - name: Add Github Actions IP to RDS security group (Oat)
        run: |
          aws ec2 authorize-security-group-ingress --group-id ${{ secrets.RDS_SG }} --ip-permissions '[{"IpProtocol": "tcp", "FromPort": 3306, "ToPort": 3306, "IpRanges": [{"CidrIp": "${{ steps.publicip.outputs.ip }}/32", "Description": "GitHub runner IP for Sponsor Engagement automation DB migration"}]}]'
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REPOSITORY: crnccp-ecr-oat-se-repository
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_NAME_TAG: se-web
          IMAGE_SHA_TAG: se-web-${{ github.sha }}
        run: |
          echo "Using registry ${{ env.ECR_REGISTRY }}"
          echo "Tagging image with ${{ env.IMAGE_NAME_TAG}} and ${{ env.IMAGE_SHA_TAG }}"
          docker build -f apps/web/Dockerfile --build-arg NEXT_PUBLIC_ODP_DASHBOARD_LINK=${{ env.CRNCCD_SECRET_OAT_SE_APP_CONFIG_NEXT_PUBLIC_ODP_DASHBOARD_LINK }} --build-arg NEXT_PUBLIC_GTM_ID=${{ env.CRNCCP_SECRET_OAT_SE_APP_CONFIG_NEXT_PUBLIC_GTM_ID }} -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_NAME_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_SHA_TAG .
          docker push --all-tags $ECR_REGISTRY/$ECR_REPOSITORY
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_SHA_TAG" >> "$GITHUB_OUTPUT"
      - name: Run database migrations
        run: npm run migrate:deploy
        env:
          DATABASE_URL: ${{ env.CRNCCP_SECRET_OAT_SE_APP_CONFIG_DATABASE_URL }}

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        env:
          ECS_TASK_DEFINITION: ./apps/web/.aws/task-definition-oat.json
          CONTAINER_NAME: crnccp-ecs-oat-se-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}
          environment-variables: |
            AWS_REGION=${{ env.AWS_REGION }}
            AWS_SECRET_NAME=${{ vars.AWS_SECRET_NAME }}
            NEXTAUTH_URL=${{ vars.NEXTAUTH_URL }}

      - name: Remove Github Actions IP from RDS security group (Oat)
        run: |
          aws ec2 revoke-security-group-ingress --group-id ${{ secrets.RDS_SG }} --ip-permissions '[{"IpProtocol": "tcp", "FromPort": 3306, "ToPort": 3306, "IpRanges": [{"CidrIp": "${{ steps.publicip.outputs.ip }}/32", "Description": "GitHub runner IP for Sponsor Engagement automation DB migration"}]}]'
      - name: Deploy Amazon ECS task definition
        env:
          ECS_SERVICE: crnccp-ecs-oat-se-service
          ECS_CLUSTER: crnccp-ecs-oat-se-cluster
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

  deploy-prod:
    needs: deploy-oat
    environment: PROD
    name: 'Deploy Prod'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials (prod)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.CRNCC_PROD_IAM_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.CRNCC_PROD_IAM_ACCESS_KEY_SECRET }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get secrets from Secrets Manager
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            crnccp-secret-prod-se-app-config
          parse-json-secrets: true

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get GitHub Actions Runner Public IP
        id: publicip
        run: |
          response=$(curl -s icanhazip.com)
          echo "ip=$response" >> "$GITHUB_OUTPUT"
      - name: Add Github Actions IP to RDS security group (Prod)
        run: |
          aws ec2 authorize-security-group-ingress --group-id ${{ secrets.RDS_SG }} --ip-permissions '[{"IpProtocol": "tcp", "FromPort": 3306, "ToPort": 3306, "IpRanges": [{"CidrIp": "${{ steps.publicip.outputs.ip }}/32", "Description": "GitHub runner IP for Sponsor Engagement automation DB migration"}]}]'
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REPOSITORY: crnccp-ecr-prod-se-repository
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_NAME_TAG: se-web
          IMAGE_SHA_TAG: se-web-${{ github.sha }}
        run: |
          echo "Using registry ${{ env.ECR_REGISTRY }}"
          echo "Tagging image with ${{ env.IMAGE_NAME_TAG}} and ${{ env.IMAGE_SHA_TAG }}"
          docker build -f apps/web/Dockerfile --build-arg NEXT_PUBLIC_ODP_DASHBOARD_LINK=${{ env.CRNCCD_SECRET_PROD_SE_APP_CONFIG_NEXT_PUBLIC_ODP_DASHBOARD_LINK }} --build-arg NEXT_PUBLIC_GTM_ID=${{ env.CRNCCP_SECRET_PROD_SE_APP_CONFIG_NEXT_PUBLIC_GTM_IDCRNCCP_SECRET_PROD_SE_APP_CONFIG_NEXT_PUBLIC_GTM_IDCRNCCP_SECRET_PROD_SE_APP_CONFIG_NEXT_PUBLIC_GTM_IDCRNCCP_SECRET_PROD_SE_APP_CONFIG_NEXT_PUBLIC_GTM_IDCRNCCP_SECRET_PROD_SE_APP_CONFIG_NEXT_PUBLIC_GTM_IDCRNCCP_SECRET_PROD_SE_APP_CONFIG_NEXT_PUBLIC_GTM_ID }} -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_NAME_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_SHA_TAG .
          docker push --all-tags $ECR_REGISTRY/$ECR_REPOSITORY
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_SHA_TAG" >> "$GITHUB_OUTPUT"
      - name: Run database migrations
        run: npm run migrate:deploy
        env:
          DATABASE_URL: ${{ env.CRNCCP_SECRET_PROD_SE_APP_CONFIG_DATABASE_URL }}

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        env:
          ECS_TASK_DEFINITION: ./apps/web/.aws/task-definition-prod.json
          CONTAINER_NAME: crnccp-ecs-prod-se-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}
          environment-variables: |
            AWS_REGION=${{ env.AWS_REGION }}
            AWS_SECRET_NAME=${{ vars.AWS_SECRET_NAME }}
            NEXTAUTH_URL=${{ vars.NEXTAUTH_URL }}

      - name: Remove Github Actions IP from RDS security group (Prod)
        run: |
          aws ec2 revoke-security-group-ingress --group-id ${{ secrets.RDS_SG }} --ip-permissions '[{"IpProtocol": "tcp", "FromPort": 3306, "ToPort": 3306, "IpRanges": [{"CidrIp": "${{ steps.publicip.outputs.ip }}/32", "Description": "GitHub runner IP for Sponsor Engagement automation DB migration"}]}]'
      - name: Deploy Amazon ECS task definition
        env:
          ECS_SERVICE: crnccp-ecs-prod-se-service
          ECS_CLUSTER: crnccp-ecs-prod-se-cluster
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

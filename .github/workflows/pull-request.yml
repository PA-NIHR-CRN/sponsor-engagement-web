name: Pull Requests

on:
  pull_request:
    branches:
      - '*'

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: eu-west-2

jobs:
  # Install dependencies
  install:
    name: Install
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup-node
      - uses: ./.github/actions/install-cache
      - uses: ./.github/actions/turbo-cache
      - name: Install
        run: npm install --no-audit --no-fund

  # Build project
  build:
    name: Build
    needs: [install]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup-node
      - uses: ./.github/actions/install-cache
      - uses: ./.github/actions/build-cache
      - uses: ./.github/actions/turbo-cache
      - name: Configure AWS credentials (dev)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.NIHR_GITHUB_ACTIONS_IAM_ID }}
          aws-secret-access-key: ${{ secrets.NIHR_GITHUB_ACTIONS_IAM_SECRET }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get secrets from Secrets Manager
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            crnccd-secret-dev-se-app-config
          parse-json-secrets: true
      - name: Build
        # Inject the minimum amount of env vars needed to build the project
        run: |
          touch apps/web/.env.local
          echo DATABASE_URL=${{ secrets.DATABASE_URL }} >> apps/web/.env.local
          echo CONTENTFUL_BANNER_ENTRY_ID=${{ env.CRNCCD_SECRET_DEV_SE_APP_CONFIG_CONTENTFUL_BANNER_ENTRY_ID }} >> apps/web/.env.local
          echo CONTENTFUL_SPACE_ID=${{ env.CRNCCD_SECRET_DEV_SE_APP_CONFIG_CONTENTFUL_SPACE_ID }} >> apps/web/.env.local
          echo CONTENTFUL_ACCESS_TOKEN=${{ env.CRNCCD_SECRET_DEV_SE_APP_CONFIG_CONTENTFUL_ACCESS_TOKEN }} >> apps/web/.env.local
          echo CONTENTFUL_ENVIRONMENT=${{ env.CRNCCD_SECRET_DEV_SE_APP_CONFIG_CONTENTFUL_ENVIRONMENT }} >> apps/web/.env.local
          echo CONTENTFUL_PREVIEW_MODE=${{ env.CRNCCD_SECRET_DEV_SE_APP_CONFIG_CONTENTFUL_PREVIEW_MODE }} >> apps/web/.env.local
          echo CONTENTFUL_PREVIEW_ACCESS_TOKEN=${{ env.CRNCCD_SECRET_DEV_SE_APP_CONFIG_CONTENTFUL_PREVIEW_ACCESS_TOKEN }} >> apps/web/.env.local
          echo NEXT_PUBLIC_APP_ENV=${{ vars.APP_ENV }} >> apps/web/.env.local
          echo CONTENTFUL_BANNER_ENTRY_ID=test>> apps/web/.env.local
          echo ENVIRONMENT_VARIABLE_CHECKS=disabled >> apps/web/.env.local
          npx turbo run build --cache-dir=".turbo"

  # Code quality checks
  quality-checks:
    name: Lint
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup-node
      - uses: ./.github/actions/install-cache
      - uses: ./.github/actions/build-cache
      - uses: ./.github/actions/turbo-cache
      - name: Quality check
        run: |
          npx turbo run lint --cache-dir=".turbo"
          npx turbo run typecheck --cache-dir=".turbo"

  # Unit tests
  unit-tests:
    name: Unit tests
    permissions: write-all
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup-node
      - uses: ./.github/actions/install-cache
      - uses: ./.github/actions/build-cache
      - uses: ./.github/actions/turbo-cache
      - name: Unit tests
        run: |
          npx turbo run test:ci --cache-dir=".turbo"
      - name: Unit tests coverage comment
        uses: MishaKav/jest-coverage-comment@main
        with:
          title: Unit tests coverage
          multiple-files: |
            Web App, apps/web/coverage/coverage-summary.json
            Ingest App, apps/ingest/coverage/coverage-summary.json
            UI Package, packages/ui/coverage/coverage-summary.json
            Email Package, packages/email/coverage/coverage-summary.json
            Auth Package, packages/auth/coverage/coverage-summary.json

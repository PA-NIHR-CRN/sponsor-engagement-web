name: Manually execute scheduled task 

on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: Select the environment
        options:
        - dev
        - test
        - uat
        - oat
        - prod
      appname:
        type: choice
        description: Select application
        options:
        - ingest

env:
  AWS_DEFAULT_REGION: eu-west-2
jobs:
  deploy-dev:
    name: "Manually executing ${{ github.event.inputs.appname || 'ingest' }} scheduled task in DEV"
    if: github.event.inputs.environment == 'dev'
    environment: DEV
    runs-on: ubuntu-latest
    steps:
      # credentials to connect to AWS 
      - name: Configure AWS credentials (dev/test)
        uses: aws-actions/configure-aws-credentials@v1

        with:
          aws-access-key-id: ${{ secrets.NIHR_GITHUB_ACTIONS_IAM_ID }}
          aws-secret-access-key: ${{ secrets.NIHR_GITHUB_ACTIONS_IAM_SECRET }}
          aws-region: eu-west-2
          role-session-name: GitHubActionsDev

      - name: Update CloudWatch Event Rule
        run: |
          aws events put-rule --name crnccd-ecs-dev-se-ingest-cw-event-rule --schedule-expression "rate(1 minute)"
          aws events enable-rule --name crnccd-ecs-dev-se-ingest-cw-event-rule

      - name: Trigger ECS Task
        run: |
          # Use the AWS CLI to trigger the ECS task

      - name: Wait for 2 Minute
        run: |
          sleep 120

      - name: Restore Original Schedule
        run: |
          aws events put-rule --name crnccd-ecs-dev-se-ingest-cw-event-rule --schedule-expression "cron(0 20 * * ? *)"
          aws events enable-rule --name crnccd-ecs-dev-se-ingest-cw-event-rule


      # - name: execute ${{ github.event.inputs.appname}} in DEV
      #   env:
      #     ECS_CLUSTER: crnccd-ecs-dev-se-cluster
      #     TASK_DEFINITION: crnccd-ecs-dev-se-${{ github.event.inputs.appname}}-task-definition
      #     COUNT: 1
      #     SUBNET_ID: ${{ secrets.ECS_SUBNET }}
      #     SECURITY_GROUP_ID: ${{ secrets.ECS_SG }}
      #   run: |
      #     aws ecs run-task --cluster ${{ env.ECS_CLUSTER }} --task-definition ${{ env.TASK_DEFINITION }} --count ${{ env.COUNT }} --network-configuration "awsvpcConfiguration={subnets=${{ env.SUBNET_ID }},securityGroups=[${{ env.SECURITY_GROUP_ID }}]}"

  deploy-test:
    name: "Manually executing ${{ github.event.inputs.appname || 'ingest' }} scheduled task in TEST"
    if: github.event.inputs.environment == 'test'
    environment: TEST
    runs-on: ubuntu-latest
    steps:
      # credentials to connect to AWS 
      - name: Configure AWS credentials (dev/test)
        uses: aws-actions/configure-aws-credentials@v1

        with:
          aws-access-key-id: ${{ secrets.NIHR_GITHUB_ACTIONS_IAM_ID }}
          aws-secret-access-key: ${{ secrets.NIHR_GITHUB_ACTIONS_IAM_SECRET }}
          aws-region: eu-west-2
          role-session-name: GitHubActionsTest

      - name: execute ${{ github.event.inputs.appname}} in TEST
        env:
          ECS_CLUSTER: crnccd-ecs-test-se-cluster
          TASK_DEFINITION: crnccd-ecs-test-se-${{ github.event.inputs.appname}}-task-definition
          COUNT: 1
          SUBNET_ID: ${{ secrets.ECS_SUBNET }}
          SECURITY_GROUP_ID: ${{ secrets.ECS_SG }}
        run: |
          aws ecs run-task --cluster ${{ env.ECS_CLUSTER }} --task-definition ${{ env.TASK_DEFINITION }} --count ${{ env.COUNT }} \
          --network-configuration "awsvpcConfiguration={subnets=${env.SUBNET_ID},securityGroups=[${env.SECURITY_GROUP_ID}]}"

  deploy-uat:
    name: "Manually executing ${{ github.event.inputs.appname || 'ingest' }} scheduled task in UAT"
    if: github.event.inputs.environment == 'uat'
    environment: UAT
    runs-on: ubuntu-latest
    steps:
      # credentials to connect to AWS 
      - name: Configure AWS credentials (uat)
        uses: aws-actions/configure-aws-credentials@v1

        with:
          aws-access-key-id: ${{ secrets.CRNCC_STAGING_IAM_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.CRNCC_STAGING_IAM_ACCESS_KEY_SECRET }}
          aws-region: eu-west-2
          role-session-name: GitHubActionsUat

      - name: execute ${{ github.event.inputs.appname}} in UAT
        env:
          ECS_CLUSTER: crnccs-ecs-uat-se-cluster
          TASK_DEFINITION: crnccs-ecs-uat-se-${{ github.event.inputs.appname}}-task-definition
          COUNT: 1
          SUBNET_ID: ${{ secrets.ECS_SUBNET }}
          SECURITY_GROUP_ID: ${{ secrets.ECS_SG }}
        run: |
          aws ecs run-task --cluster ${{ env.ECS_CLUSTER }} --task-definition ${{ env.TASK_DEFINITION }} --count ${{ env.COUNT }} \
          --network-configuration "awsvpcConfiguration={subnets=${env.SUBNET_ID},securityGroups=[${env.SECURITY_GROUP_ID}]}"

  deploy-oat:
    name: "Manually executing ${{ github.event.inputs.appname || 'ingest' }} scheduled task in OAT"
    if: github.event.inputs.environment == 'oat'
    environment: OAT
    runs-on: ubuntu-latest
    steps:
      # credentials to connect to AWS 
      - name: Configure AWS credentials (oat/prod)
        uses: aws-actions/configure-aws-credentials@v1

        with:
          aws-access-key-id: ${{ secrets.CRNCC_PROD_IAM_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.CRNCC_PROD_IAM_ACCESS_KEY_SECRET }}
          aws-region: eu-west-2
          role-session-name: GitHubActionsOat

      - name: execute ${{ github.event.inputs.appname}} in OAT
        env:
          ECS_CLUSTER: crnccp-ecs-oat-se-cluster
          TASK_DEFINITION: crnccp-ecs-oat-se-${{ github.event.inputs.appname}}-task-definition
          COUNT: 1
          SUBNET_ID: ${{ secrets.ECS_SUBNET }}
          SECURITY_GROUP_ID: ${{ secrets.ECS_SG }}
        run: |
          aws ecs run-task --cluster ${{ env.ECS_CLUSTER }} --task-definition ${{ env.TASK_DEFINITION }} --count ${{ env.COUNT }} --network-configuration "awsvpcConfiguration={subnets=${env.SUBNET_ID},securityGroups=[${env.SECURITY_GROUP_ID}]}"

  deploy-prod:
    name: "Manually executing ${{ github.event.inputs.appname || 'ingest' }} scheduled task in PROD"
    if: github.event.inputs.environment == 'prod'
    environment: PROD
    runs-on: ubuntu-latest
    steps:
      # credentials to connect to AWS 
      - name: Configure AWS credentials (oat/prod)
        uses: aws-actions/configure-aws-credentials@v1

        with:
          aws-access-key-id: ${{ secrets.CRNCC_PROD_IAM_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.CRNCC_PROD_IAM_ACCESS_KEY_SECRET }}
          aws-region: eu-west-2
          role-session-name: GitHubActionsProd

      - name: execute ${{ github.event.inputs.appname}} in PROD
        env:
          ECS_CLUSTER: crnccp-ecs-prod-se-cluster
          TASK_DEFINITION: crnccp-ecs-prod-se-${{ github.event.inputs.appname}}-task-definition
          COUNT: 1
          SUBNET_ID: ${{ secrets.ECS_SUBNET }}
          SECURITY_GROUP_ID: ${{ secrets.ECS_SG }}
        run: |
          aws ecs run-task --cluster ${{ env.ECS_CLUSTER }} --task-definition ${{ env.TASK_DEFINITION }} --count ${{ env.COUNT }} \
          --network-configuration "awsvpcConfiguration={subnets=${env.SUBNET_ID},securityGroups=[${env.SECURITY_GROUP_ID}]}"